<?php

namespace App\Controllers;

use CodeIgniter\Controller;
use App\Models\ProductsModel;
use App\Models\ProductpurchaseModel;

class CartController extends Controller
{
    public function __construct()
    {
        helper(['session']);
    }

    private $values = [];
    public function cancel()
    {
        echo "payment fail";
    }

    // public function success()
    // {
    //     echo "payment success";
    // }

    // public function takepayment()
    // {
    //     $data = http_build_query(array(
    //         'line_items[0][price_data][currency]' => 'usd',
    //         'line_items[0][price_data][product_data][name]' => 'T-shirt',
    //         'line_items[0][price_data][unit_amount]' => 700,
    //         'line_items[0][quantity]' => 1,
    //         'mode' => 'payment',
    //         'success_url' => 'http://localhost:8080/success',
    //         'cancel_url' => 'http://localhost:8080/cancel'
    //     ));
    //     // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    //     $ch = curl_init();

    //     curl_setopt($ch, CURLOPT_URL, 'https://api.stripe.com/v1/checkout/sessions');
    //     curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    //     curl_setopt($ch, CURLOPT_POST, 1);
    //     curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    //     curl_setopt($ch, CURLOPT_USERPWD, 'sk_test_51POdnMRxUCuaL4sGxpof9uFvdgjHjq9xNHpXNDkMj8NOu8x3x9AEiXIYJcaL0pPmHV3Qix46RhEfJThAe9GUa0C800fG5PgLZ3');

    //     $headers = array();
    //     $headers[] = 'Content-Type: application/x-www-form-urlencoded';
    //     curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    //     $result = curl_exec($ch);
    //     if (curl_errno($ch)) {
    //         echo 'Error:' . curl_error($ch);
    //     }
    //     curl_close($ch);
    //     echo "<pre>";
    //     print_r($result);
    // }

    // public function payment()
    // {
    //     // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    //     $ch = curl_init();

    //     curl_setopt($ch, CURLOPT_URL, 'https://api.stripe.com/v1/payment_intents');
    //     curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    //     curl_setopt($ch, CURLOPT_POST, 1);
    //     curl_setopt($ch, CURLOPT_POSTFIELDS, "amount=23&currency=usd&payment_method_types[]=card");
    //     curl_setopt($ch, CURLOPT_USERPWD, 'sk_test_51POdnMRxUCuaL4sGxpof9uFvdgjHjq9xNHpXNDkMj8NOu8x3x9AEiXIYJcaL0pPmHV3Qix46RhEfJThAe9GUa0C800fG5PgLZ3');

    //     $headers = array();
    //     $headers[] = 'Content-Type: application/x-www-form-urlencoded';
    //     curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    //     $result = curl_exec($ch);
    //     if (curl_errno($ch)) {
    //         echo 'Error:' . curl_error($ch);
    //     }
    //     curl_close($ch);
    //     echo "<pre>";
    //     print_r($result);
    // }

    public function index()
    {
        $session = session();
        helper(['form']);
        $productsModel = new ProductsModel();
        $data = [];

        if (session()->has('values')) {
            // Retrieve the session array 'values'
            $data['catValues'] = COUNT(session()->get('values'));
            $data['fullCatValues'] = session()->get('values');
            $data['productsModel'] = $productsModel->where('active', 1)->whereIn('productId', session()->get('values'))->orderBy('productId', 'desc')->findAll();
        } else {
            // If not set, initialize as an empty array
            $data['catValues'] = "";
            $data['fullCatValues'] = array();
            $data['productsModel'] = array();
        }

        // Set the title
        $data['title'] = 'myCart';
        echo view('myCart', $data);
    }

    public function checkoutAction()
    {
        $session = session();
        $productsModel = new ProductsModel();
        $productpurchaseModel = new ProductpurchaseModel();
        if (isset($_POST)) {
            if (session()->has('values')) {
                // Retrieve the session array 'values'
                $data['catValues'] = COUNT(session()->get('values'));
                $data['fullCatValues'] = session()->get('values');
                $data['productsModel'] = $productsModel->where('active', 1)->whereIn('productId', session()->get('values'))->orderBy('productId', 'desc')->findAll();
            } else {
                // If not set, initialize as an empty array
                $data['catValues'] = "";
                $data['fullCatValues'] = array();
                $data['productsModel'] = array();
            }

            $counts = array_count_values($data['fullCatValues']);

            $line_items = array();
            foreach ($data['productsModel'] as $key => $val) {
                $line_items['line_items[' . $key . '][price_data][currency]'] = 'usd';
                $line_items['line_items[' . $key . '][price_data][product_data][name]'] = $data['productsModel'][$key]['productName'];
                $line_items['line_items[' . $key . '][price_data][unit_amount]'] = $data['productsModel'][$key]['productId'];
                $line_items['line_items[' . $key . '][quantity]'] = $counts[$data['productsModel'][$key]['productId']];
            }
            $line_items['mode'] = 'payment';
            $line_items['success_url'] = 'http://localhost:8080/success';
            $line_items['cancel_url'] = 'http://localhost:8080/cancel';

            $data = http_build_query($line_items);
            $data = http_build_query(array(
                'line_items[0][price_data][currency]' => 'usd',
                'line_items[0][price_data][product_data][name]' => 'T-shirt',
                'line_items[0][price_data][unit_amount]' => 700,
                'line_items[0][quantity]' => 1,
                'mode' => 'payment',
                'success_url' => 'http://localhost:8080/success',
                'cancel_url' => 'http://localhost:8080/cancel'
            ));
            // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
            $ch = curl_init();

            curl_setopt($ch, CURLOPT_URL, 'https://api.stripe.com/v1/checkout/sessions');
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            curl_setopt($ch, CURLOPT_USERPWD, 'sk_test_51POdnMRxUCuaL4sGxpof9uFvdgjHjq9xNHpXNDkMj8NOu8x3x9AEiXIYJcaL0pPmHV3Qix46RhEfJThAe9GUa0C800fG5PgLZ3');

            $headers = array();
            $headers[] = 'Content-Type: application/x-www-form-urlencoded';
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

            $result = curl_exec($ch);
            if (curl_errno($ch)) {
                echo 'Error:' . curl_error($ch);
            }
            curl_close($ch);
            $result = json_decode($result, true);

            $datapayment = [
                'respons'     => json_encode($result, true),
                'add_date' => date('Y-m-d H:i:s')
            ];

            if ($productpurchaseModel->save($datapayment)) {
                // redirect()->to($result['url']);
                // header("Location:" . $result['url']);
                echo $result['url'];
                // return Redirect::to($result['url']);
?>
                <meta http-equiv="refresh" content="0; url=<?php echo $result['url']; ?>">
<?php
            }
        }
    }
    public function checkout()
    {
        $session = session();
        helper(['form']);
        $productsModel = new ProductsModel();
        $data = [];

        if (session()->has('values')) {
            // Retrieve the session array 'values'
            $data['catValues'] = COUNT(session()->get('values'));
            $data['fullCatValues'] = session()->get('values');
            $data['productsModel'] = $productsModel->where('active', 1)->whereIn('productId', session()->get('values'))->orderBy('productId', 'desc')->findAll();
        } else {
            // If not set, initialize as an empty array
            $data['catValues'] = "";
            $data['fullCatValues'] = array();
            $data['productsModel'] = array();
        }

        // Set the title
        $data['title'] = 'Products View';
        echo view('checkout', $data);
    }
    public function addValue()
    {
        $value = $this->request->getPost('value');

        if ($value) {
            // Retrieve the existing array from session
            $values = session()->get('values') ?? [];

            // Add value to the array
            $values[] = $value;
            // Save the updated array to session
            session()->set('values', $values);

            // Return the updated array in the response
            return $this->response->setJSON(['success' => true, 'values' => COUNT($values)]);
        }

        return $this->response->setJSON(['success' => false]);
    }

    public function clearArray()
    {
        // Clear the session array
        session()->remove('values');

        // Return a response indicating success
        return $this->response->setJSON(['success' => true]);
    }
}
